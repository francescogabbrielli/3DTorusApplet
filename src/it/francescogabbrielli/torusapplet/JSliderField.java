/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JSliderField.java
 *
 * Created on 26-nov-2010, 15.27.12
 */

package it.francescogabbrielli.torusapplet;

import java.awt.event.KeyEvent;
import java.util.Locale;
import javax.swing.SwingConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Francesco Gabbrielli
 */
public class JSliderField extends javax.swing.JPanel implements SwingConstants {

	private double tickScale = 1d ;
	private String textFormat = "%f" ;
	private double value ;
	private double max ;
	private double min ;
	private boolean textModified ;

    /** Creates new form JSliderField */
    public JSliderField() {

        initComponents();

		setTickScale(1d) ;
		
		//max = slider.getMaximum() * tickScale ;
		//min = slider.getMinimum() * tickScale ;
		//value = slider.getValue() * tickScale ;
		textField.getDocument().addDocumentListener(new DocumentListener() {
			public void insertUpdate(DocumentEvent e) {
				textModified = true ;
			}
			public void removeUpdate(DocumentEvent e) {
				textModified = true ;
			}
			public void changedUpdate(DocumentEvent e) {
				textModified = true ;
			}
		});
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        slider = new javax.swing.JSlider();
        textField = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        slider.setMajorTickSpacing(10);
        slider.setMinorTickSpacing(1);
        slider.setPaintTicks(true);
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        add(slider, java.awt.BorderLayout.CENTER);

        textField.setColumns(5);
        textField.setText("value");
        textField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                textFieldFocusLost(evt);
            }
        });
        textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textFieldKeyReleased(evt);
            }
        });
        add(textField, java.awt.BorderLayout.EAST);
    }// </editor-fold>//GEN-END:initComponents

	private void textFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textFieldFocusLost
		if(textModified)
			textModified() ;
}//GEN-LAST:event_textFieldFocusLost

	private void textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldKeyReleased
		if(evt.getKeyCode()==KeyEvent.VK_ENTER) {
			textModified() ;
		}
}//GEN-LAST:event_textFieldKeyReleased

	private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
		try {
			String txt = String.format(Locale.US, textFormat, value) ;
			setValue(slider.getValue() * tickScale) ;
			textField.setText(txt);
			slider.setToolTipText(txt);
		} catch(Exception e) {
			e.printStackTrace();
		}
}//GEN-LAST:event_sliderStateChanged

	private void textModified() {
		String old = textField.getText() ;
		try {
			setValue(Double.parseDouble(textField.getText()));
		} catch(NumberFormatException e) {
			textField.setText(old);
		}
		textModified = false ;
	}

	public double getTickScale() {
		return tickScale ;
	}

	public void setTickScale(double scale) {
		if(scale<=0)
			System.out.println("Scale cannot be set to 0 or negative values") ;
		this.tickScale = scale ;
		int i = 0 ;
		int d = 0 ;
		int intScale = (int) scale ;
		for(i=0;i<10 && intScale>0;i++)
			intScale /= 10 ;
		double decimals = scale - (int) scale ;
		if(decimals>0) {
			i++ ;
			for(d=0;d<10 && decimals<1d;d++)
				decimals *= 10 ;
		}
		textFormat = "%"+i+"."+d+"f" ;
		setMin(min) ;
		setMax(max) ;
	}
	
	@Override
	public void setEnabled(boolean enabled) {
		super.setEnabled(enabled);
		slider.setEnabled(enabled);
		textField.setEnabled(enabled);
	}
	
	public boolean isEditable() {
		return textField.isEditable();
	}
	
	public void setEditable(boolean editable) {
		textField.setEditable(editable);
	}

	public int getOrientation() {
		return slider.getOrientation() ;
	}

	public void setOrientation(int orientation) {
		slider.setOrientation(orientation);
	}

	public int getColumns() {
		return textField.getColumns() ;
	}

	public void setColumns(int cols) {
		textField.setColumns(cols);
	}

	public double getMax() {
		return max ;
	}

	public void setMax(double max) {
		//double old = this.max ;
		this.max = max ;
		int intval = (int) (max / tickScale) ;
		if(intval!=slider.getMaximum())
			slider.setMaximum(intval);
		//firePropertyChange("max", old, max);
	}

	public double getMin() {
		return min ;
	}

	public void setMin(double min) {
		//double old = this.min ;
		this.min = min ;
		int intval = (int) (min / tickScale) ;
		if(intval!=slider.getMinimum())
			slider.setMinimum(intval);
		//firePropertyChange("min", old, min);
	}

	public int getMajorTickSpacing() {
		return slider.getMajorTickSpacing() ;
	}

	public void setMajorTickSpacing(int n) {
		slider.setMajorTickSpacing(n);
	}

	public int getMinorTickSpacing() {
		return slider.getMinorTickSpacing() ;
	}

	public void setMinorTickSpacing(int n) {
		slider.setMinorTickSpacing(n)  ;
	}

	public int getIntValue() {
		return (int) (value+.5d) ;
	}

	public double getValue() {
		return value ;
	}

	public void setValue(double val) {
		double old = this.value ;
		this.value  = val ;
		if(old!=value)
			fireStateChanged(new ChangeEvent(this));		
		int intval = (int) (val / tickScale) ;
		if(intval!=slider.getValue())
			slider.setValue(intval);
	}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider slider;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables

	public synchronized void addChangeListener(ChangeListener listener) {
		listenerList.add(ChangeListener.class, listener);
	}

	public synchronized void removeChangeListener(ChangeListener listener) {
		listenerList.remove(ChangeListener.class, listener);
	}

	synchronized void fireStateChanged(ChangeEvent evt) {
		ChangeListener[] ll = listenerList.getListeners(ChangeListener.class) ;
		for(ChangeListener l : ll)
			l.stateChanged(evt);
	}
}
