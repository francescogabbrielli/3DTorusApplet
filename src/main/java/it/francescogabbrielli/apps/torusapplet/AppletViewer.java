/*
 * AppletViewer.java
 *
 * Created on 21-nov-2010, 22.24.58
 */

package it.francescogabbrielli.apps.torusapplet;

import javax.swing.*;
import java.awt.*;
import java.applet.*;
import java.io.*;
import java.net.*;
import java.awt.event.*;
import java.util.*;


/**
 *
 * @author Francesco Gabbrielli
 */
public class AppletViewer extends javax.swing.JFrame
		implements ActionListener, AppletStub, AppletContext {
    
    private final JApplet applet;

    /** Creates new form AppletViewer */
    public AppletViewer(JApplet applet) {

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch(Exception e) {
            e.printStackTrace();
        }
        this.applet = applet;
        initComponents();
    }
    
    /**
     * Start the applet
     * @param applet 
     */
    @SuppressWarnings("deprecation")
    public void start() {
        getContentPane().add(applet, BorderLayout.CENTER);
        setVisible(true);
        applet.setStub(this);
        applet.init();
        applet.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusPanel = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("3D Torus Applet");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        statusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusPanel.setLayout(new java.awt.FlowLayout(0, 5, 2));

        statusLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        statusLabel.setText("Ok");
        statusPanel.add(statusLabel);

        getContentPane().add(statusPanel, java.awt.BorderLayout.SOUTH);

        setSize(new java.awt.Dimension(812, 620));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

	private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
		//applet.init();
	}//GEN-LAST:event_formComponentResized

	private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		close();
	}//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel statusLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
	// AppletStub methods
	/**
	 * Use the File class  (See lecture 9) and the System properties
	 * to create a URL from the current working directory.
	 **/
	public URL getDocumentBase() {
		URL url = null;
		try {
			File file = new File(System.getProperty("user.dir"));
			url = file.toURL();
		} catch (MalformedURLException e) {
			System.out.println("Bad URL");
			url = null;
		}
		return url;
	} // getDocumentBase

	/** Provide getCodeBae that returns a URL
	 * that points to the local directory where
	 * this program is running.
	 **/
	public URL getCodeBase() {
		URL url = null;
		try {
			File file = new File(System.getProperty("user.dir"));
			url = file.toURL();
			System.out.println("url=" + url);
		} catch (MalformedURLException e) {
			System.out.println("Bad URL");
			url = null;
		}
		return url;

	} // getCodeBase

	// Note: ignore the warning that there is also a private isActive
	// method in the java.awt.Window class.
	public boolean isActive() {
		return true;
	}

	public String getParameter(String name) {
		return "";
	}

	public AppletContext getAppletContext() {
		return this;
	}

	public void appletResize(int width, int height) {
	}

	// AppletContext methods
	// Use the toolkit to get the image from the local directory
	public Image getImage(URL url) {
		String imgName = url.getFile();
		return Toolkit.getDefaultToolkit().getImage(imgName);
	}

	public AudioClip getAudioClip(URL url) {
		return null;
	}

	public Applet getApplet(String name) {
		return null;
	}

	public Enumeration<Applet> getApplets() {
		return null;
	}

	public void showDocument(URL url) {
	}

	public void showDocument(URL url, String target) {
	}

	public void showStatus(String status) {
		statusLabel.setText(status);
	}

	// New AppletContext methods added in vers.1.4
	public void setStream(String key, InputStream stream) {
	}

	public Iterator<String> getStreamKeys() {
		return null;
	}

	public InputStream getStream(String key) {
		return null;
	}

	public void actionPerformed(ActionEvent e) {
		if (e.getActionCommand().equals("Quit")) {
			dispose();
		}
		System.exit(0);
	} // actionPerformed

	public void close() {
		applet.stop();
		dispose();
	}

}
